'''
    람다함수(lambda)
   1) 4가지 형태의 일반함수의 다른 표현방법이다.
     단, 함수의 문장이 단일 문장인 경우에만 람다함수로 표현이 가능하다.
   2) 특징:
       - 익명함수 (anonymous function)이다.
        따라서 다음과 같이 변수에 저장해서 사용한다.
         변수명(A) = 람다(함수객체)

      * 변수명(A) 이용해서 활용? ==> 일급객체 형태로 활용 가능
        1) 다른 변수에 저장
        2) 함수 호출시 인자값으로
        3) 함수 호출시 리턴값
'''

# 1. 파라미터 없고 리턴값 없는 형태

# 가. 일반 함수
def fun1():
    print("fun1")

fun1()

# 나. 람다 함수
fun1 = lambda :print("lambda: fun1")
fun1()

print("--------------------------------------")
print("--------------------------------------")
print("--------------------------------------")
# 2. 파라미터 있고 리턴값 없는 형태

# 가. 일반 함수
def fun2(n, n2):
    print(n, n2)

fun2(10, 20)

# 나. 람다 함수
fun2 = lambda n, n2:print(n, n2)
fun2(100, 200)

print("--------------------------------------")
print("--------------------------------------")
print("--------------------------------------")

# 3. 파라미터 없고 리턴값 있는 형태

# 가. 일반 함수
def fun3():
    return 100
result = fun3()
print("일반함수:", result)

# 나. 람다 함수
fun3 = lambda :"홍길동"
result = fun3()
print("람다 함수:", result)
print("--------------------------------------")
print("--------------------------------------")
print("--------------------------------------")
# 4. 파라미터 있고 리턴값 있는 형태

# 가. 일반 함수
def fun4(n, n2):
    return n+n2
result = fun4(10, 20)
print("일반함수:", result)

# 나. 람다 함수
fun4 = lambda n, n2:n+n2
result = fun4(100, 200)
print("람다 함수:", result)


####################################
print("람다함수에서도 default 파라미터 사용 가능.")
def fun5(n=33, n2=200):
    print(n, n2)

fun5 = lambda n=33, n2=200:print(n, n2)
fun5(1,2)
fun5(1)
fun5()
####################################
print("람다함수에서도 packing 사용 가능.")
def fun6(n, *n2): # tuple 로 packing
    print(n, n2)

fun6 = lambda n, *n2:print(n, n2)
fun6(10, 20)
fun6(9,8,7)
fun6(90,80,70,60)
####################################
print("람다함수에서도 dict로 packing 사용 가능.")
def fun7(**n): # dict로 packing
    print(n)

fun7 = lambda **n: print(n)
fun7(name="홍길동", age=20)
####################################
print("람다함수에서도 *,** 혼합 packing 사용 가능.")
def fun8(n, *n2, **n3):
    print(n , n2, n3)

fun8(10,20,30, name=1, age=2)